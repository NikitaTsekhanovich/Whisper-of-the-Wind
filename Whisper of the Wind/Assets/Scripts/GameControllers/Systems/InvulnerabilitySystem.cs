using GameControllers.Components;
using GameControllers.Components.Events;
using GameControllers.Data;
using GameControllers.MonoBehControllers;
using Leopotam.Ecs;
using UnityEngine;

namespace GameControllers.Systems
{
    public class InvulnerabilitySystem : IEcsRunSystem
    {
        private readonly SoundsContainer _soundsContainer;
        private readonly RunTimeData _runTimeData;
        private readonly EcsFilter<InvulnerabilityComponent, TransformComponent, TakeInvulnerabilityEvent> _invulnerabilityFilter = null;

        public void Run()
        {
            foreach (var i in _invulnerabilityFilter)
            {
                ref var entity = ref _invulnerabilityFilter.GetEntity(i);

                ref var invulnerabilityComponent = ref _invulnerabilityFilter.Get1(i);
                ref var currentTimeAction = ref invulnerabilityComponent.CurrentTimeAction;
                ref var invulnerabilitySprite = ref invulnerabilityComponent.InvulnerabilitySprite;

                ref var transformComponent = ref _invulnerabilityFilter.Get2(i);
                ref var transform = ref transformComponent.Transform;

                if (!_runTimeData.IsActiveInvulnerability)
                {
                    _soundsContainer.TakeInvulnerabilitySound.Play();
                    _runTimeData.IsActiveInvulnerability = true;
                    invulnerabilitySprite.SetActive(true);
                    transform.gameObject.layer = LayerMask.NameToLayer("Invulnerability");
                }

                currentTimeAction += Time.deltaTime;

                if (currentTimeAction >= InvulnerabilityComponent.TimeAction)
                {
                    currentTimeAction = 0;
                    _runTimeData.IsActiveInvulnerability = false;
                    invulnerabilitySprite.SetActive(false);
                    transform.gameObject.layer = LayerMask.NameToLayer("Default");
                    entity.Del<TakeInvulnerabilityEvent>();
                }
            }
        }
    }
}

